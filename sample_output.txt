nl 1.c
     1	/** Pointers are very very very dangerous! */
     2	// This is a silly demo.   Do not do this.
      	
     3	#include <stdio.h>
      	
     4	int main() {
     5	  int a=1,b=2,c=3,d=4,e=5;
      	
     6	  long diff=(long) &a;
     7	  diff -= (long) &e;
     8	  printf("&a=%p &e=%p diff=%ld\n", &a, &e, diff);
     9		printf("WHY DOES THIS NOT MAKE SENSE?? \n"
    10					 "diff/sizeof(int)=%d\n", diff/sizeof(int));
      	
      	
    11	  diff=(long) &b;
    12	  diff -= (long) &c;
    13	  printf("&b=%p &c=%p diff=%ld\n", &b, &c, diff);
    14		printf("diff/sizeof(int)=%d\n", diff/sizeof(int));
      	
    15		// This next bit is a flashy demo and NOT a good practic!
    16	  int *p; // p points to an int
    17	  p=&a;   // Set p to point at e by taking the address of e
    18	  int x;
    19	  for (x=0; x < 5; ++x) {
    20	    *p=100; // Change the value of the int pointed to by p to 100
    21	            // *p is read "dereference p"... 
    22							// as in p is a referenc to an int
    23	    p++;    // Make p point to the next int
    24	  }
      	
    25	  printf("a=%d b=%d c=%d d=%d e=%d\n", a, b, c, d, e);
      	
    26	  return 0;
    27	}
cc 1.c
./a.out
&a=0x7fff5fbff214 &e=0x7fff5fbff204 diff=16
WHY DOES THIS NOT MAKE SENSE?? 
diff/sizeof(int)=4
&b=0x7fff5fbff210 &c=0x7fff5fbff20c diff=4
diff/sizeof(int)=1
a=100 b=2 c=3 d=4 e=5
rm a.out
nl 2.c
     1	/** A pointer to an integer, and an integer */
     2	#include <stdio.h>
      	
     3	int main() {
     4	  int *p, q;
     5	  p = &q; // p gets the address of q -- p points at q
     6	  *p=42;  // The integer pointed to by p gets the value 42
     7	  printf("q=%d p=%p &q=%p *p=%d\n", q,p,&q, *p);
     8	  q=86; // *p referes to the same location as q
     9	  printf("q=%d p=%p &q=%p *p=%d\n", q,p,&q, *p);
    10	  return 0;
    11	}
    12	  
cc 2.c
./a.out
q=42 p=0x7fff5fbff20c &q=0x7fff5fbff20c *p=42
q=86 p=0x7fff5fbff20c &q=0x7fff5fbff20c *p=86
rm a.out
nl 3.c
     1	/** You can take the address of a string */
     2	#include <stdio.h>
      	
     3	int main() {
     4	  char *p;
      	
     5	  p="I like eggs";
     6	  printf("*p='%c'\n", *p);
     7	  printf("p='%s'\n", p);
     8	  printf("p='%s'\n", p+2);
     9	  return 0;
    10	}
    11	  
cc 3.c
./a.out
*p='I'
p='I like eggs'
p='like eggs'
rm a.out
nl 4.c
     1	/** Simulating call-by-reference using pointers */
     2	#include <stdio.h>
      	
     3	void swap(int *p, int *q) {
     4	  int tmp = *p;
     5	  *p = *q;
     6	  *q = tmp;
     7	}
      	
     8	int main() {
     9	  int a=42, b=86;
      	
    10	  printf("a=%d b=%d\n", a,b);
    11	  swap(&a,&b); // The address of a becomes a pointer to a.... etc.
    12	  printf("a=%d b=%d\n", a,b);
      	
    13	  return 0;
    14	}
    15	  
cc 4.c
./a.out
a=42 b=86
a=86 b=42
rm a.out
nl 5.c
     1	/** Simulating call-by-reference using (array[] syntax) pointers */
     2	#include <stdio.h>
      	
     3	void swap(int p[], int q[]) { // so, int p[] is "just like" int *p
     4	  int tmp = *p;
     5	  *p = *q;
     6	  *q = tmp;
     7	}
      	
     8	int main() {
     9	  int a=42, b=86;
      	
    10	  printf("a=%d b=%d\n", a,b);
    11	  swap(&a,&b); 
    12	  printf("a=%d b=%d\n", a,b);
      	
    13	  return 0;
    14	}
    15	  
cc 5.c
./a.out
a=42 b=86
a=86 b=42
rm a.out
nl 6.c
     1	/** Simulating call-by-reference using ([] array syntax) pointers */
     2	#include <stdio.h>
      	
     3	// NOTE: this does not work -- void swap(int[] p, int[] q) {
     4	void swap(int p[], int q[]) {
     5		//int[] demop; // BAD SYNTAX!
     6	  int tmp = *p;
     7	  *p = *q;
     8	  *q = tmp;
     9	}
      	
    10	int main() {
    11	  int a=42, b=86;
      	
    12	  printf("a=%d b=%d\n", a,b);
    13	  swap(&a,&b); 
    14	  printf("a=%d b=%d\n", a,b);
      	
    15	  return 0;
    16	}
    17	  
cc 6.c
./a.out
a=42 b=86
a=86 b=42
rm a.out
nl 7.c
     1	/** Taking the address of a function. */
      	
     2	#include <stdio.h>
     3	#include <assert.h>
      	
     4	// http://stackoverflow.com/questions/840501/how-do-function-pointers-in-c-work
      	
     5	int addInt(int n, int m) {
     6		return n+m;
     7	}
      	
     8	int multInt(int n, int m) {
     9		return n*m;
    10	}
      	
    11	int main() {
      	
    12		int (*functionPtr)(int,int);
    13		
    14		functionPtr=addInt; 
    15		//QUESTION: FIND OUT WHY & IS NOT NEEDED
    16		//ANSWER: both are valid.  Thus spoke stack overflow...
    17		// http://stackoverflow.com/questions/258422/function-pointers-in-c-address-operator-unnecessary
      	
    18		int sum=(*functionPtr)(2,3);
    19		printf("sum=%d\n", sum);
    20		assert(5==sum);
      	
    21		// Wild and CRAZY!
    22		functionPtr=&multInt;
    23		sum=(*functionPtr)(2,3);
    24		printf("sum=%d\n", sum);
    25		assert(6==sum);
      	
    26		return 0;
    27	}
      	
cc 7.c
./a.out
sum=5
sum=6
rm a.out
nl 8.c
     1	/** Associate right to left: (*p)++ vs *p++ */
      	
     2	#include <stdio.h>
     3	#include <assert.h>
      	
     4	long diff(int *x, int *y) {
     5		long lx=(long)x;
     6		long ly=(long)y;
     7		return lx-ly;
     8	}
      	
     9	int main() {
    10		int a=100,b=200,c=300,d=400,e=500;
    11		int *p, *pOld;
      	
    12		p=&a;
    13		pOld=p;
    14		// a is 100
    15		// *p happens first due to ( ) 
    16		// so value will be 100
    17		// After the derefernce to get the value,
    18		// we post increment the thing ("a") being referenced
    19		int value = (*p)++;
    20		printf("value=%d a=%d p=%p pOld=%p diff=%ld\n",
    21			value,a,p,pOld,diff(p,pOld));
    22		assert(100==value);
    23		//assert(101=value);
      	
    24		assert(101==a);
    25		value = ++(*p);
    26		printf("value=%d a=%d p=%p pOld=%p diff=%ld\n",
    27			value,a,p,pOld,diff(p,pOld));
    28		assert(102==value);
      	
      	
    29		pOld=p;
    30		value = *p++;
    31		printf("value=%d a=%d p=%p pOld=%p diff=%ld\n",
    32			value,a,p,pOld,diff(p,pOld));
    33		//FAILS: assert(200==*p); // Compiler specific code!!  DANGER WILL ROBINSON!!!
    34		//FAILS: assert(&b==p); // Compiler specific code!!  DANGER WILL ROBINSON!!!
    35		// Really not a non-compiler specific way???
    36		// This is a nice idea!  Put it back and check...
    37		p--;
    38		assert(&a==p); // NICE!
    39		// So, we know that *p++ ended up incrementing the POINTER
    40		// and not the thing being referenced (pointed at)
      	
    41		return 0;
    42	}
cc 8.c
./a.out
value=100 a=101 p=0x7fff5fbff20c pOld=0x7fff5fbff20c diff=0
value=102 a=102 p=0x7fff5fbff20c pOld=0x7fff5fbff20c diff=0
value=102 a=102 p=0x7fff5fbff210 pOld=0x7fff5fbff20c diff=4
rm a.out
nl 9.c
     1	/** Non-Constant pointer to non-constant data */
      	
     2	#include <stdio.h>
      	
     3	int main() {
     4		int a=1,b=2,c=3;
     5		int *p; // Non-constant pointer to non-constant data
     6		p=&a;
      	
     7		// Taking advantage of a, b, and c being next to each 
     8		// other in RAM is a parlor trick and NOT A GOOD PRACTICE!
     9		// Remember!  Pointers are very very very dangerous
    10		int i;
    11		for (i=0; i < 3; ++i) {
    12			*p=100*(*p);
    13			p++;
    14		}
    15		printf("a=%d, b=%d, c=%d\n", a,b,c);
      	
    16		return 0;
    17	}
cc 9.c
./a.out
a=100, b=2, c=3
rm a.out
nl 10.c
     1	/** Non-constant pointer to constant integers; the integer at the location can not be changed. */
      	
     2	#include <stdio.h>
      	
     3	int main() {
     4		int a=1,b=2,c=3;
     5		const int *p; // Non-constant pointer to constant integers; the integer at the location can not be changed. 
     6		p=&a;
      	
     7		int i;
     8		for (i=0; i < 3; ++i) {
     9			//*p=100*(*p);
    10			printf("p=%p\n", p);
    11			p++;
    12		}
    13		printf("a=%d, b=%d, c=%d\n", a,b,c);
      	
    14		return 0;
    15	}
cc 10.c
./a.out
p=0x7fff5fbff214
p=0x7fff5fbff218
p=0x7fff5fbff21c
a=1, b=2, c=3
rm a.out
nl 11.c
     1	/** Constant pointer to non-constant integer; the integer can be changed but the pointer can not be changed. */
      	
     2	#include <stdio.h>
      	
     3	int main() {
     4		int a=1,b=2,c=3;
     5		int * const p=&a; // Constant pointer to non-constant integer; the integer can be changed but the pointer can not be changed. */
     6		// WHY does this not work??  
     7		// p=&a;
      	
     8		int i;
     9		for (i=0; i < 3; ++i) {
    10			*p=100*(*p);
    11			printf("p=%p *p=%d\n", p,*p);
    12			//TRY THIS: 
    13			//p++;
    14		}
    15		printf("a=%d, b=%d, c=%d\n", a,b,c);
      	
    16		return 0;
    17	}
cc 11.c
./a.out
p=0x7fff5fbff214 *p=100
p=0x7fff5fbff214 *p=10000
p=0x7fff5fbff214 *p=1000000
a=1000000, b=2, c=3
rm a.out
nl 12.c
     1	/** Neither the pointer nor the integer it points at can be changed. */
      	
      	
     2	#include <stdio.h>
      	
     3	int main() {
     4		int a=1,b=2,c=3;
     5		// Neither the pointer nor the integer it points at can be changed. 
     6		const int * const p=&a; 
     7	  // WHY?
     8	  //p=&a;
      	
     9		int i;
    10		for (i=0; i < 3; ++i) {
    11			//WHY?
    12			//*p=100*(*p);
    13			printf("p=%p\n", p);
    14			// WHY?
    15			//p++;
    16		}
    17		printf("a=%d, b=%d, c=%d\n", a,b,c);
      	
    18		return 0;
    19	}
cc 12.c
./a.out
p=0x7fff5fbff214
p=0x7fff5fbff214
p=0x7fff5fbff214
a=1, b=2, c=3
rm a.out
nl 13.c
     1	/** qsort demo.  RTFM: man qsort */
      	
     2	#include <stdio.h>
     3	#include <stdlib.h>
      	
     4	int mycompare(const void *a, const void *b) {
     5		// Almost always need to cast to tell C what is in the void
     6	  int *ai = (int *) a; 
     7	  int *bi = (int *) b;
     8	  int aValue = (int)*ai; // CAST is NOT NEEDED!
     9	  int bValue = *bi;
    10	  return aValue-bValue;
    11	}
      	
    12	void printAray(int p[],int nel) { // or could say "int *p"
    13	  int i;
    14	  for (i=0; i < nel; ++i) {
    15	    printf("%d ", *p);
    16	    p++;
    17	  }
    18	  printf("\n");
    19	}
      	
    20	int main() {
    21	  int aray[]={7,2,9};
    22	  int nel = 3;
    23	  /*void qsort(void *base, size_t nmemb, size_t size,
    24	                  int(*compar)(const void *, const void *));
    25		*/
    26	  qsort(aray,nel, sizeof(int), &mycompare); // consistent with 7.c
    27	  printAray(aray,nel);
    28		// Holy #Q@$!!!  Why does it work BOTH WAYS!!!???
    29	  qsort(aray,nel, sizeof(int), mycompare); // consistent with 7.c
    30	  printAray(aray,nel);
      	
    31		// BECAUSE (sorry, it's lame) pointers are
    32		// VERY VERY VERY DANGEROUS!!!
    33	  return 0;
    34	}
cc 13.c
./a.out
2 7 9 
2 7 9 
rm a.out
nl 14.c
     1	/** Arrays/pointers in the command line */
     2	#include <stdio.h>
     3	#include <stdlib.h>
      	
     4	// RTFM man 7 environ 
     5	extern char **environ;
      	
     6	//ANSWER: This way (3rd param to main) is deprecated
     7	// https://www.securecoding.cert.org/confluence/display/seccode/ENV31-C.+Do+not+rely+on+an+environment+pointer+following+an+operation+that+may+invalidate+it
     8	int main(int argc, char *argv[], char *env[]) {
     9		// argc -- argument cont
    10		// argv -- argument vector 
    11	  // Let's talk about argv!!
      	
    12	  int i;
    13	  for (i=0; i < argc; i++) {
    14	    printf("argv[%d]='%s'\n", i, argv[i]);
    15	  }
      	
    16		//QUESTION: show how to properly access environment variables
    17		//ANSWER: This way is deprecated
    18		// https://www.securecoding.cert.org/confluence/display/seccode/ENV31-C.+Do+not+rely+on+an+environment+pointer+following+an+operation+that+may+invalidate+it
    19	  for (i=0; NULL==env[i]; i++) {
    20	    printf("env[%d]='%s'\n", i, env[i]);
    21	  }
      	
    22		// RTFM getenv
    23		char *path=getenv("PATH");
    24		printf("PATH is '%s'\n", path);
    25		// RTFM man 7 environ 
    26		char **ep=environ;
    27		while (NULL!=*ep) {
    28			char *env_assignment=*ep;
    29			ep++;
    30			puts(env_assignment);
    31		}
      	
    32		
    33	  return 0;
    34	}
cc 14.c
./a.out I like eggs "They are tasty"
argv[0]='./a.out'
argv[1]='I'
argv[2]='like'
argv[3]='eggs'
argv[4]='They are tasty'
PATH is '/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290/bin:/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290@global/bin:/Users/mgpayne/.rvm/rubies/ruby-1.9.2-p290/bin:/Users/mgpayne/.rvm/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin:/usr/X11/bin:/opt/local/bin'
rvm_dump_environment_flag=0
TERM_PROGRAM=iTerm.app
LC_MONETARY=en_US.utf-8
rvm_bin_path=/Users/mgpayne/.rvm/bin
rvm_clang_flag=0
GEM_HOME=/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290
GPG_AGENT_INFO=/Users/mgpayne/.gnupg/S.gpg-agent:307:1
TERM=xterm
SHELL=/bin/bash
MAKEFLAGS=
TMPDIR=/var/folders/IL/ILL0adgsGq89FHBGBZvCF++++TI/-Tmp-/
IRBRC=/Users/mgpayne/.rvm/rubies/ruby-1.9.2-p290/.irbrc
Apple_PubSub_Socket_Render=/tmp/launch-QtuS8i/Render
LC_NUMERIC=en_US.utf-8
MY_RUBY_HOME=/Users/mgpayne/.rvm/rubies/ruby-1.9.2-p290
rvm_verbose_flag=0
USER=mgpayne
COMMAND_MODE=legacy
__array_start=0
rvm_path=/Users/mgpayne/.rvm
SSH_AUTH_SOCK=/tmp/launch-sb13pE/Listeners
rvm_debug_flag=0
__CF_USER_TEXT_ENCODING=0x1F5:0:0
MAKELEVEL=1
escape_flag=1
MFLAGS=
rvm_prefix=/Users/mgpayne
rvm_trace_flag=0
PATH=/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290/bin:/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290@global/bin:/Users/mgpayne/.rvm/rubies/ruby-1.9.2-p290/bin:/Users/mgpayne/.rvm/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin:/usr/X11/bin:/opt/local/bin
LC_MESSAGES=en_US.utf-8
_=./a.out
LC_COLLATE=en_US.utf-8
PWD=/Users/mgpayne/git/1840/22May2012Talk
LANG=en_US.utf-8
_second=1
rvm_version=1.10.0
COLORFGBG=0;15
SHLVL=2
HOME=/Users/mgpayne
LOGNAME=mgpayne
_first=0
GEM_PATH=/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290:/Users/mgpayne/.rvm/gems/ruby-1.9.2-p290@global
LC_CTYPE=en_US.utf-8
rvm_reload_flag=0
DISPLAY=/tmp/launch-GFSXK5/org.x:0
LC_TIME=en_US.utf-8
RUBY_VERSION=ruby-1.9.2-p290
rm a.out
nl 15.c
     1	/** Pointer arithmetic: p++ increases p by sizeof(*p) 
     2	aka the size of the base type
     3	int *p -- base type is int
     4	*/
      	
     5	#include <stdio.h>
      	
     6	long diff(void *a, void *b) {
     7		long al = (long) a;
     8		long bl = (long) b;
     9		return al - bl;
    10	}
      	
    11	void voidDemo(void *p) {
    12		void *pOld;
    13		pOld=p;
    14		p++;
    15		printf("voidDemo: %3s=%p %6s=%p diff=%ld\n", 
    16											"p", p,"pOld",pOld,diff(p,pOld));
    17	}
      	
    18	void	charDemo() {
    19		char *cp,*cpOld;
    20		char c='A';
    21		cp=&c;
      	
    22		voidDemo(cp);
    23		cpOld=cp;
    24		cp++;
    25		printf("charDemo: %3s=%p %6s=%p diff=%ld\n", 
    26											"cp", cp,"cpOld",cpOld,diff(cp,cpOld));
    27	}
      	
    28	void	shortDemo() {
    29		short *sp,*spOld;
    30		short s=42;
    31		sp=&s;
      	
    32		voidDemo(sp);
    33		spOld=sp;
    34		sp++;
    35		printf("shortDemo: %3s=%p %6s=%p diff=%ld sizeof(short)=%d\n", 
    36											"sp", sp,"spOld",spOld,diff(sp,spOld),sizeof(short));
    37		printf("QUESTION: Why is the address one off from the void demo here?\n");
    38		printf("ANSWER: points must align with their underlying type... short every two bytes (on vulcan), int every four bytes (on vulcan), and so on.\n");
    39	}
      	
    40	void	intDemo() {
    41		int *ip,*ipOld;
    42		int i=42;
    43		ip=&i;
      	
    44		voidDemo(ip);
    45		ipOld=ip;
    46		ip++;
    47		printf("intDemo: %3s=%p %6s=%p diff=%ld sizeof(short)=%d\n", 
    48											"ip", ip,"ipOld",ipOld,diff(ip,ipOld),sizeof(int));
    49	}
      	
    50	void	longDemo() {
    51		long *lp,*lpOld;
    52		long l=42l;
    53		lp=&l;
      	
    54		voidDemo(lp);
    55		lpOld=lp;
    56		lp++;
    57		printf("lp=%p lpOld=%p diff=%ld\n", lp,lpOld,diff(lp,lpOld));
    58	}
      	
    59	int main() {
      	
    60		charDemo();
    61		shortDemo();
    62		intDemo();
    63		longDemo();
      	
    64		return 0;
    65	}
      	
      	
cc 15.c
./a.out
voidDemo:   p=0x7fff5fbff1f0   pOld=0x7fff5fbff1ef diff=1
charDemo:  cp=0x7fff5fbff1f0  cpOld=0x7fff5fbff1ef diff=1
voidDemo:   p=0x7fff5fbff1ef   pOld=0x7fff5fbff1ee diff=1
shortDemo:  sp=0x7fff5fbff1f0  spOld=0x7fff5fbff1ee diff=2 sizeof(short)=2
QUESTION: Why is the address one off from the void demo here?
ANSWER: points must align with their underlying type... short every two bytes (on vulcan), int every four bytes (on vulcan), and so on.
voidDemo:   p=0x7fff5fbff1ed   pOld=0x7fff5fbff1ec diff=1
intDemo:  ip=0x7fff5fbff1f0  ipOld=0x7fff5fbff1ec diff=4 sizeof(short)=4
voidDemo:   p=0x7fff5fbff1e9   pOld=0x7fff5fbff1e8 diff=1
lp=0x7fff5fbff1f0 lpOld=0x7fff5fbff1e8 diff=8
rm a.out
nl 16.c
     1	/** Pointer arithmetic: p+6 is really p+(6*sizeof(*p)) */
      	
     2	#include <stdio.h>
      	
     3	long diff(void *a, void *b) {
     4		long al = (long) a;
     5		long bl = (long) b;
     6		return al - bl;
     7	}
      	
     8	void voidDemo(void *p) {
     9		void *pOld;
    10		pOld=p;
    11		p+=6;
    12		printf("p=%p pOld=%p diff=%ld\n", p,pOld,diff(p,pOld));
    13	}
      	
    14	void	charDemo() {
    15		char *cp,*cpOld;
    16		char c='A';
    17		cp=&c;
      	
    18		voidDemo(cp);
    19		cpOld=cp;
    20		cp+=6;
    21		printf("cp=%p cpOld=%p diff=%ld\n", cp,cpOld,diff(cp,cpOld));
    22	}
      	
    23	void	shortDemo() {
    24		short *sp,*spOld;
    25		short s=42;
    26		sp=&s;
      	
    27		voidDemo(sp);
    28		spOld=sp;
    29		sp+=6;
    30		printf("sp=%p spOld=%p diff=%ld\n", sp,spOld,diff(sp,spOld));
    31	}
      	
    32	void	intDemo() {
    33		int *ip,*ipOld;
    34		int i=42;
    35		ip=&i;
      	
    36		voidDemo(ip);
    37		ipOld=ip;
    38		ip+=6;
    39		printf("ip=%p ipOld=%p diff=%ld\n", ip,ipOld,diff(ip,ipOld));
    40	}
      	
    41	void	longDemo() {
    42		long *lp,*lpOld;
    43		long l=42l;
    44		lp=&l;
      	
    45		voidDemo(lp);
    46		lpOld=lp;
    47		lp+=6;
    48		printf("lp=%p lpOld=%p diff=%ld\n", lp,lpOld,diff(lp,lpOld));
    49	}
      	
    50	int main() {
      	
    51		charDemo();
    52		shortDemo();
    53		intDemo();
    54		longDemo();
      	
    55		return 0;
    56	}
      	
      	
cc 16.c
./a.out
p=0x7fff5fbff1f5 pOld=0x7fff5fbff1ef diff=6
cp=0x7fff5fbff1f5 cpOld=0x7fff5fbff1ef diff=6
p=0x7fff5fbff1f4 pOld=0x7fff5fbff1ee diff=6
sp=0x7fff5fbff1fa spOld=0x7fff5fbff1ee diff=12
p=0x7fff5fbff1f2 pOld=0x7fff5fbff1ec diff=6
ip=0x7fff5fbff204 ipOld=0x7fff5fbff1ec diff=24
p=0x7fff5fbff1ee pOld=0x7fff5fbff1e8 diff=6
lp=0x7fff5fbff218 lpOld=0x7fff5fbff1e8 diff=48
rm a.out
nl 17.c
     1	/** Pointer arithmetic: a[i] is really &a[0] + i * sizeof(a[0]) */
     2	// Or &a[0] + i * sizeof(base data type)
     3	// In other words ----
     4	// In all C compilers
     5	// Arrays are ALWAYS contiguous in MEMORY
     6	#include <stdio.h>
     7	#include <assert.h>
      	
     8	// Why void?
     9	int really(void *p, int i, int sz) {
    10		void *pCalculated;
    11		pCalculated = p + i*sz;
    12		int *pi;
    13		pi = (int*) pCalculated;
    14		return *pi;
    15	}
      	
    16	int main() {
    17		int aRay[]={1,2,3,4,5}, len=5,i;
    18		
    19		for (i=0; i < len; ++i) {
    20			printf("%d=aRay[%d]==really(&aRay[0],i,sizeof(aRay[0]))=%d\n",
    21				aRay[i],i,really(&aRay[0],i,sizeof(aRay[0])));
    22			assert(aRay[i]==really(&aRay[0],i,sizeof(aRay[0])));
    23		}
      	
    24		return 0;
    25	}
      	
      	
cc 17.c
./a.out
1=aRay[0]==really(&aRay[0],i,sizeof(aRay[0]))=1
2=aRay[1]==really(&aRay[0],i,sizeof(aRay[0]))=2
3=aRay[2]==really(&aRay[0],i,sizeof(aRay[0]))=3
4=aRay[3]==really(&aRay[0],i,sizeof(aRay[0]))=4
5=aRay[4]==really(&aRay[0],i,sizeof(aRay[0]))=5
rm a.out
nl 18.c
     1	/** Arrays of pointers */
     2	#include <stdio.h>
     3	#include <string.h>
      	
     4	#define DAYS_IN_WEEK 7
      	
     5	void printAray(char *days[]);
      	
     6	//ANSWERED: Why did this qsort example fail!?  Other than not practicing!
     7	//qsort passes pointers to each element being sorted.
     8	//so the parameters here are really pointers to pointers!
     9	int ourstrcmp(const void *a_pointer_to_string, const void *b) {
    10		static int number_of_debug_outputs=3;
    11		// Step 1: Call it what it is -- a pointer to a pointer
    12		char **pointer2pointer1=(char **)a_pointer_to_string;
    13		// Step 2: Dereference it to get what we want -- a "char *"
    14		char *string1 = *pointer2pointer1;
    15		char **pointer2pointer2=(char **)b;
    16		char *string2 = *pointer2pointer2;
    17		if (0!=number_of_debug_outputs) {
    18			number_of_debug_outputs--;
    19			printf("string1=%s\n",string1);
    20			printf("string2=%s\n",string2);
    21		}
    22		int result = strcmp(string1,string2);
    23		return result;
    24	}
      	
      	
    25	int main(int argc, char *argv[]) {
    26	  char *days[] = { "Sunday", "Monday", "Tuesday", "Wed", "Beer day", "Fri", 
    27			"Saturday" };
    28		printAray(days);
    29		//qsort(days,DAYS_IN_WEEK,sizeof(char *), strcmp);//attempt to "cheat"
    30		qsort(days,DAYS_IN_WEEK,sizeof(char *), ourstrcmp);//attempt to "cheat"
    31		printAray(days);
    32	  return 0;
    33	}
      	
    34	void printAray(char *days[]) {
    35	  printf("This is an array of seven pointers to strings.\n");
    36	  int i;
    37	  for (i=0; i < DAYS_IN_WEEK; ++i) {
    38	    printf("\t%s\n", days[i]);
    39	  }
    40	}
cc 18.c
./a.out
This is an array of seven pointers to strings.
	Sunday
	Monday
	Tuesday
	Wed
	Beer day
	Fri
	Saturday
string1=Monday
string2=Wed
string1=Tuesday
string2=Wed
string1=Sunday
string2=Wed
This is an array of seven pointers to strings.
	Beer day
	Fri
	Monday
	Saturday
	Sunday
	Tuesday
	Wed
rm a.out
nl 19.c
     1	/** Pointers to functions: Can call through the pointer to the function. */
     2	#include <stdio.h>
     3	#include <stdio.h>
     4	#include <assert.h>
      	
     5	// http://stackoverflow.com/questions/840501/how-do-function-pointers-in-c-work
      	
     6	int addInt(int n, int m) {
     7		return n+m;
     8	}
      	
     9	int main() {
      	
    10		int (*functionPtr)(int,int);
    11		
    12		functionPtr=&addInt;
      	
    13		int sum=(*functionPtr)(2,3);
    14		printf("sum=%d\n", sum);
    15		assert(5==sum);
      	
    16		return 0;
    17	}
      	
cc 19.c
./a.out
sum=5
rm a.out
nl 20.c
     1	/** Preview of comming attractions! */
     2	#include <stdio.h>
      	
     3	int main(int argc, char *argv[]) {
     4	  int *ptr = malloc(200);
     5	  // Dynamic allocation -- What's it really good for?
     6	  free(ptr);
     7	  return 0;
     8	}
cc 20.c
./a.out
rm a.out
nl q1.c
     1	/** What's wrong with this code? */
      	
     2	#include <stdio.h>
      	
     3	int add_it(int a[ ] ) {
     4	  int result=0;
     5	  int i;
     6	  int sizeof_a = sizeof(a);
     7		int sizeof_a_first_element = sizeof(a[0]);
     8		printf("sizeof_a=%d sizeof_a_first_element=%d\n",  
     9			sizeof_a, sizeof_a_first_element);
      	
    10	  for (i=0; i < sizeof(a) / sizeof(a[0]); i++) {
    11	    printf("a[%d]=%d\n", i, a[i]);  
    12	    result += a[i];
    13	  }
    14	  return result;
    15	}
      	
    16	int main() {
    17	  int aray[]={4,5,6,7,8};
    18	  int sum=add_it(aray);
      	
    19	  printf("sum=%d\n", sum);
    20	  return 0;
    21	}
    22	  
cc q1.c
./a.out
sizeof_a=8 sizeof_a_first_element=4
a[0]=4
a[1]=5
sum=9
rm a.out
